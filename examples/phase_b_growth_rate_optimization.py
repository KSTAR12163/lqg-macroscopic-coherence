#!/usr/bin/env python3
"""
Phase B - Step 1: MAXIMIZE GROWTH PER TIME (Not Per Period)

KEY INSIGHT from Floquet scan:
- Growth per period is misleading (small œâ ‚Üí large per-period gain but slow in time)
- Growth per TIME is what matters: growth_rate = ln(|Œª_F|_max) √ó œâ/(2œÄ)

GOAL: Find parameter region with MAXIMUM growth_rate to close ~10^14√ó gap FAST

This is WARP-FIRST: aggressively hunt for fastest exponential amplification.
"""

import numpy as np
import sys
from pathlib import Path
from dataclasses import dataclass
from typing import Tuple, Dict, List

sys.path.insert(0, str(Path(__file__).parent.parent))

from src.floquet_instability.floquet_scan import (
    FloquetScanConfig,
    floquet_growth_rate,
)

print("=" * 80)
print("PHASE B - STEP 1: GROWTH RATE OPTIMIZATION (WARP-FIRST)")
print("=" * 80)
print("\nüéØ MISSION: Find fastest exponential amplification path")
print("\nKey insight: growth_rate = ln(|Œª_F|) √ó œâ/(2œÄ)")
print("  ‚Üí We need FAST growth in TIME, not just per period\n")

# ============================================================================
# CONFIGURATION
# ============================================================================

# Two-level system parameters (will map from network in Step 2)
DELTA = 1e-2  # Energy gap (placeholder, will use real network value)
G0 = 1e-4     # Coupling strength (placeholder)

# PT gain parameter
GAMMA_GAIN = 1e-6  # Non-zero for instability

# Scan ranges (AGGRESSIVE and WIDE)
OMEGA_MIN = 1e-8  # Very low frequency
OMEGA_MAX = 1e-2  # Up to gap frequency
NUM_OMEGA = 50    # Dense scan

AMPLITUDE_VALUES = [0.01, 0.05, 0.1, 0.2, 0.5, 1.0]  # Drive strengths

DELTA_VALUES = [1e-3, 1e-2, 1e-1]  # Different gaps

print("Scan parameters:")
print(f"  œâ range: [{OMEGA_MIN:.2e}, {OMEGA_MAX:.2e}] ({NUM_OMEGA} points)")
print(f"  A values: {AMPLITUDE_VALUES}")
print(f"  Œî values: {DELTA_VALUES}")
print(f"  Œ≥_gain: {GAMMA_GAIN:.2e}")
print(f"  g0: {G0:.2e}")

# ============================================================================
# OPTIMIZATION ENGINE
# ============================================================================

@dataclass
class GrowthRateResult:
    """Store growth rate and associated parameters."""
    growth_per_period: float
    growth_rate_per_time: float  # KEY METRIC
    omega: float
    amplitude: float
    delta: float
    period: float
    time_to_10x: float  # Time to achieve 10√ó amplification
    time_to_1e14: float  # Time to close the gap!


def compute_growth_rate_per_time(
    delta: float, omega: float, amplitude: float, g0: float, gamma_gain: float
) -> GrowthRateResult:
    """
    Compute growth rate per unit time (the critical metric).
    
    growth_rate = ln(|Œª_F|_max) √ó œâ/(2œÄ)
    
    This tells us how fast amplitude grows in PHYSICAL TIME.
    """
    config = FloquetScanConfig(
        delta=delta,
        g0=g0,
        amplitude=amplitude,
        omega=omega,
        gamma_gain=gamma_gain,
        steps_per_period=200,
        periods=1,  # Only need 1 period for monodromy
    )
    
    growth_per_period, details = floquet_growth_rate(config)
    
    # Convert to growth per time
    period = 2 * np.pi / omega
    growth_rate = growth_per_period * omega / (2 * np.pi)
    
    # Time to achieve various amplifications
    # A(t) = A(0) * exp(growth_rate * t)
    # t = ln(A(t)/A(0)) / growth_rate
    
    if growth_rate > 1e-20:  # Positive growth
        time_to_10x = np.log(10) / growth_rate
        time_to_1e14 = np.log(1e14) / growth_rate
    else:
        time_to_10x = np.inf
        time_to_1e14 = np.inf
    
    return GrowthRateResult(
        growth_per_period=growth_per_period,
        growth_rate_per_time=growth_rate,
        omega=omega,
        amplitude=amplitude,
        delta=delta,
        period=period,
        time_to_10x=time_to_10x,
        time_to_1e14=time_to_1e14,
    )


def optimize_growth_rate(
    delta_values: List[float],
    omega_grid: np.ndarray,
    amplitude_values: List[float],
    g0: float,
    gamma_gain: float,
) -> Tuple[GrowthRateResult, List[GrowthRateResult]]:
    """
    Exhaustive scan to find maximum growth rate per time.
    
    Returns:
        best: Best result found
        all_results: All results for analysis
    """
    all_results = []
    best = None
    
    total = len(delta_values) * len(omega_grid) * len(amplitude_values)
    count = 0
    
    print(f"\nScanning {total} parameter combinations...")
    print("(This may take a few minutes)\n")
    
    for delta in delta_values:
        for omega in omega_grid:
            for amplitude in amplitude_values:
                result = compute_growth_rate_per_time(
                    delta, omega, amplitude, g0, gamma_gain
                )
                all_results.append(result)
                
                if best is None or result.growth_rate_per_time > best.growth_rate_per_time:
                    best = result
                
                count += 1
                if count % 100 == 0:
                    print(f"  Progress: {count}/{total} ({100*count/total:.1f}%)")
    
    return best, all_results


# ============================================================================
# EXECUTE SCAN
# ============================================================================

print("\n" + "=" * 80)
print("EXECUTING GROWTH RATE OPTIMIZATION")
print("=" * 80)

# Create logarithmic omega grid
omega_grid = np.logspace(np.log10(OMEGA_MIN), np.log10(OMEGA_MAX), NUM_OMEGA)

best, all_results = optimize_growth_rate(
    DELTA_VALUES,
    omega_grid,
    AMPLITUDE_VALUES,
    G0,
    GAMMA_GAIN,
)

# ============================================================================
# ANALYZE RESULTS
# ============================================================================

print("\n" + "=" * 80)
print("RESULTS: MAXIMUM GROWTH RATE")
print("=" * 80)

print(f"\n‚úÖ BEST PARAMETERS FOUND:")
print(f"  Œî (gap):           {best.delta:.4e}")
print(f"  œâ (drive freq):    {best.omega:.4e}")
print(f"  A (drive amp):     {best.amplitude:.4f}")
print(f"  Œ≥_gain:            {GAMMA_GAIN:.4e}")

print(f"\nüìä GROWTH METRICS:")
print(f"  Growth per period:     {best.growth_per_period:.6f}")
print(f"  Period T:              {best.period:.4e} s")
print(f"  Growth rate per time:  {best.growth_rate_per_time:.6e} s‚Åª¬π")

print(f"\n‚è±Ô∏è  TIME TO AMPLIFICATION:")
print(f"  Time to 10√ó:       {best.time_to_10x:.4e} s")
print(f"  Time to 10¬π‚Å¥√ó:     {best.time_to_1e14:.4e} s")

# Convert to years for context
YEAR = 365.25 * 24 * 3600  # seconds
if best.time_to_1e14 < np.inf:
    years_to_1e14 = best.time_to_1e14 / YEAR
    print(f"                     ({years_to_1e14:.4e} years)")
else:
    print(f"                     (infinite)")

# ============================================================================
# COMPARE: GROWTH PER PERIOD vs GROWTH PER TIME
# ============================================================================

print("\n" + "=" * 80)
print("ANALYSIS: WHY GROWTH PER TIME MATTERS")
print("=" * 80)

# Sort by growth per period
sorted_by_period = sorted(all_results, key=lambda r: r.growth_per_period, reverse=True)

# Sort by growth per time
sorted_by_time = sorted(all_results, key=lambda r: r.growth_rate_per_time, reverse=True)

print("\nüî¥ TOP 5 BY GROWTH PER PERIOD (MISLEADING!):")
print(f"{'Rank':<6} {'œâ':<12} {'A':<8} {'Growth/period':<15} {'Growth/time':<15} {'Time to 10¬π‚Å¥√ó':<15}")
print("-" * 90)
for i, r in enumerate(sorted_by_period[:5], 1):
    time_str = f"{r.time_to_1e14:.3e}" if r.time_to_1e14 < np.inf else "inf"
    print(f"{i:<6} {r.omega:<12.3e} {r.amplitude:<8.2f} {r.growth_per_period:<15.6f} "
          f"{r.growth_rate_per_time:<15.3e} {time_str:<15}")

print("\n‚úÖ TOP 5 BY GROWTH PER TIME (CORRECT METRIC!):")
print(f"{'Rank':<6} {'œâ':<12} {'A':<8} {'Growth/period':<15} {'Growth/time':<15} {'Time to 10¬π‚Å¥√ó':<15}")
print("-" * 90)
for i, r in enumerate(sorted_by_time[:5], 1):
    time_str = f"{r.time_to_1e14:.3e}" if r.time_to_1e14 < np.inf else "inf"
    print(f"{i:<6} {r.omega:<12.3e} {r.amplitude:<8.2f} {r.growth_per_period:<15.6f} "
          f"{r.growth_rate_per_time:<15.3e} {time_str:<15}")

print("\nüí° KEY INSIGHT:")
print("  Low œâ ‚Üí high growth per period BUT slow in real time")
print("  High œâ ‚Üí lower growth per period BUT faster in real time")
print("  ‚Üí Optimal point balances both!")

# ============================================================================
# HEATMAP DATA (for plotting)
# ============================================================================

print("\n" + "=" * 80)
print("HEATMAP: GROWTH RATE vs œâ and A (at best Œî)")
print("=" * 80)

# Extract results for best delta
best_delta_results = [r for r in all_results if r.delta == best.delta]

# Create 2D arrays for heatmap
omega_unique = np.unique([r.omega for r in best_delta_results])
amp_unique = np.unique([r.amplitude for r in best_delta_results])

growth_map = np.zeros((len(amp_unique), len(omega_unique)))

for r in best_delta_results:
    i = np.where(amp_unique == r.amplitude)[0][0]
    j = np.where(omega_unique == r.omega)[0][0]
    growth_map[i, j] = r.growth_rate_per_time

print(f"\nŒî = {best.delta:.4e}")
print(f"Heatmap shape: {growth_map.shape} (amplitude √ó omega)")
print(f"Max growth rate: {np.max(growth_map):.6e} s‚Åª¬π")
print(f"At: œâ = {omega_unique[np.argmax(np.max(growth_map, axis=0))]:.4e}, "
      f"A = {amp_unique[np.argmax(np.max(growth_map, axis=1))]:.4f}")

# ============================================================================
# SAVE RESULTS
# ============================================================================

print("\n" + "=" * 80)
print("SAVING RESULTS")
print("=" * 80)

np.savez(
    'phase_b_growth_rate_results.npz',
    best_delta=best.delta,
    best_omega=best.omega,
    best_amplitude=best.amplitude,
    best_growth_per_period=best.growth_per_period,
    best_growth_rate=best.growth_rate_per_time,
    best_time_to_1e14=best.time_to_1e14,
    omega_grid=omega_grid,
    amplitude_values=AMPLITUDE_VALUES,
    delta_values=DELTA_VALUES,
    growth_map=growth_map,
    omega_unique=omega_unique,
    amp_unique=amp_unique,
)

print("‚úì Saved to phase_b_growth_rate_results.npz")

# ============================================================================
# ASSESSMENT
# ============================================================================

print("\n" + "=" * 80)
print("WARP-FIRST ASSESSMENT")
print("=" * 80)

print(f"\nüéØ BEST GROWTH RATE: {best.growth_rate_per_time:.6e} s‚Åª¬π")

if best.time_to_1e14 < np.inf:
    years = best.time_to_1e14 / YEAR
    
    print(f"\n‚è±Ô∏è  TIME TO CLOSE 10¬π‚Å¥√ó GAP:")
    print(f"    {best.time_to_1e14:.4e} seconds")
    print(f"    = {years:.4e} years")
    
    if years < 1:
        print("\nüöÄ EXCELLENT! Sub-year timescale ‚Üí potentially viable!")
        print("   Next: Map to real network parameters (Step 2)")
        print("   Then: Implement pumped Lindblad (Step 3)")
    elif years < 100:
        print("\n‚ö†Ô∏è  MODERATE: Decades timescale")
        print("   Need to: (1) Optimize Œ≥_gain, (2) Add Purcell factor (Step 4)")
    elif years < 1e6:
        print("\n‚ö†Ô∏è  LONG: >100 years but < cosmological")
        print("   Need: Strong DOS boosting + higher gain")
    else:
        print("\n‚ùå TOO SLOW: Cosmological timescale")
        print("   Need: Much higher gain or different approach")
else:
    print("\n‚ùå NO GROWTH: Insufficient gain")
    print("   Need: Higher Œ≥_gain or different parameter regime")

print("\n" + "=" * 80)
print("STEP 1 COMPLETE")
print("=" * 80)
print("\nNext: Run Step 2 (map to real network) and Step 3 (pumped Lindblad)")
